import AsyncStorage from "@react-native-async-storage/async-storage";
import firestore from "@react-native-firebase/firestore";

const ACTIVE_BOOKING_KEY = "@tricykol:active_booking";
const USER_BOOKING_KEY = (userId) => `@tricykol:booking:${userId}`;

export const BookingPersistenceService = {
  saveActiveBooking: async (booking, userId) => {
    try {
      if (!userId || !booking) {
        throw new Error("Both userId and booking are required");
      }

      const bookingData = {
        ...booking,
        userId,
        lastUpdated: Date.now(),
      };

      await AsyncStorage.setItem(
        USER_BOOKING_KEY(userId),
        JSON.stringify(bookingData),
      );

      return true;
    } catch (error) {
      console.error("Error saving active booking:", error);
      throw error;
    }
  },

  getActiveBooking: async (userId) => {
    try {
      if (!userId) {
        console.log("No userId provided to getActiveBooking");
        return null;
      }

      const bookingData = await AsyncStorage.getItem(USER_BOOKING_KEY(userId));
      if (!bookingData) return null;

      const booking = JSON.parse(bookingData);

      // Verify the booking belongs to the user and isn't too old (24 hours)
      if (
        booking.userId === userId &&
        Date.now() - booking.lastUpdated < 24 * 60 * 60 * 1000
      ) {
        return booking;
      }

      // If booking is old or invalid, clean it up
      await AsyncStorage.removeItem(USER_BOOKING_KEY(userId));
      return null;
    } catch (error) {
      console.error("Error getting active booking:", error);
      return null;
    }
  },

  clearActiveBooking: async (userId) => {
    try {
      if (!userId) {
        console.warn("No userId provided to clearActiveBooking");
        return;
      }
      await AsyncStorage.removeItem(USER_BOOKING_KEY(userId));
    } catch (error) {
      console.error("Error clearing active booking:", error);
      throw error;
    }
  },

  subscribeToBookingUpdates: (bookingId, userId, callback) => {
    if (!bookingId || !userId) {
      console.error("bookingId and userId required for subscription");
      return () => {};
    }

    const unsubscribe = firestore()
      .collection("bookings")
      .doc(bookingId)
      .onSnapshot(
        async (snapshot) => {
          try {
            if (!snapshot.exists) {
              await BookingPersistenceService.clearActiveBooking(userId);
              callback?.(null);
              return;
            }

            const data = snapshot.data();
            if (data.userId !== userId) {
              await BookingPersistenceService.clearActiveBooking(userId);
              callback?.(null);
              return;
            }

            // Format booking data
            const booking = {
              id: snapshot.id,
              ...data,
              pickup: {
                latitude: data.pickup.coordinates.latitude,
                longitude: data.pickup.coordinates.longitude,
                address: data.pickup.address,
                description: data.pickup.description,
              },
              dropoff: {
                latitude: data.dropoff.coordinates.latitude,
                longitude: data.dropoff.coordinates.longitude,
                address: data.dropoff.address,
                description: data.dropoff.description,
              },
              route: {
                coordinates: data.route.coordinates,
                distance: data.route.distance,
                duration: data.route.duration,
                fare: data.route.fare,
              },
            };

            // Save the updated booking
            await BookingPersistenceService.saveActiveBooking(booking, userId);
            callback?.(booking);
          } catch (error) {
            console.error("Error processing booking update:", error);
            callback?.(null);
          }
        },
        (error) => {
          console.error("Error in booking subscription:", error);
          callback?.(null);
        },
      );

    return unsubscribe;
  },
};
