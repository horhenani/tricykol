// src/components/map/directions/MapViewDirectionsCustom.jsx
import React, { useCallback, useEffect, useState } from "react";
import MapViewDirections from "react-native-maps-directions";
import { View, StyleSheet, Platform } from "react-native";
import { Text } from "react-native-paper";
import { GOOGLE_MAPS_API_KEY } from "@config/keys";
import { colors, fonts } from "@constants/globalStyles";

const MapViewDirectionsCustom = ({
  origin,
  destination,
  mapRef,
  onRouteInfoUpdate,
  strokeWidth = 5,
  strokeColor = colors.blue,
  mode = "DRIVING",
  showRouteInfo = true,
  routeInfoStyle,
  routeInfo,
}) => {
  const [directionsError, setDirectionsError] = useState(null);
  const [retryCount, setRetryCount] = useState(0);
  const MAX_RETRIES = 3;

  const calculateFare = useCallback((distanceInKm) => {
    const baseFare = 30;
    const ratePerKm = 5;
    const additionalKm = Math.max(0, distanceInKm - 1);
    return Math.ceil(baseFare + additionalKm * ratePerKm);
  }, []);

  // Validate coordinates before rendering
  const validateCoordinates = useCallback(() => {
    if (!origin || !destination) return false;

    const isValidCoord = (coord) => {
      return (
        coord &&
        typeof coord.latitude === "number" &&
        typeof coord.longitude === "number" &&
        !isNaN(coord.latitude) &&
        !isNaN(coord.longitude) &&
        coord.latitude >= -90 &&
        coord.latitude <= 90 &&
        coord.longitude >= -180 &&
        coord.longitude <= 180
      );
    };

    return isValidCoord(origin) && isValidCoord(destination);
  }, [origin, destination]);

  const handleRouteReady = useCallback(
    (result) => {
      if (!result) return;

      try {
        const routeInfo = {
          distance: result.distance,
          duration: result.duration,
          coordinates: result.coordinates,
          fare: calculateFare(result.distance),
        };

        if (mapRef?.current?.fitToCoordinates) {
          mapRef.current.fitToCoordinates(result.coordinates, {
            edgePadding: {
              top: 50,
              right: 50,
              bottom: 50,
              left: 50,
            },
            animated: true,
          });
        }

        setDirectionsError(null);
        setRetryCount(0);

        if (onRouteInfoUpdate) {
          onRouteInfoUpdate(routeInfo);
        }
      } catch (error) {
        console.error("Error handling route:", error);
        handleError(error);
      }
    },
    [mapRef, onRouteInfoUpdate, calculateFare],
  );

  const handleError = useCallback(
    (error) => {
      console.error("Directions Error:", error);

      // Retry logic for recoverable errors
      if (retryCount < MAX_RETRIES) {
        setRetryCount((prev) => prev + 1);
        // Exponential backoff
        setTimeout(
          () => {
            setDirectionsError(null);
          },
          Math.pow(2, retryCount) * 1000,
        );
      } else {
        setDirectionsError(error);
        if (onRouteInfoUpdate) {
          onRouteInfoUpdate(null, error);
        }
      }
    },
    [retryCount, onRouteInfoUpdate],
  );

  // Validate API key and coordinates
  useEffect(() => {
    if (!GOOGLE_MAPS_API_KEY) {
      console.error("Google Maps API Key is missing!");
      setDirectionsError(new Error("API Key is missing"));
      return;
    }

    if (!validateCoordinates()) {
      console.error("Invalid coordinates provided:", { origin, destination });
      setDirectionsError(new Error("Invalid coordinates"));
      return;
    }
  }, [origin, destination]);

  if (directionsError) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Unable to load directions</Text>
      </View>
    );
  }

  if (!validateCoordinates() || !GOOGLE_MAPS_API_KEY) return null;

  return (
    <>
      <MapViewDirections
        origin={origin}
        destination={destination}
        apikey={GOOGLE_MAPS_API_KEY}
        strokeWidth={strokeWidth}
        strokeColor={colors.blue}
        mode={mode}
        precision="high"
        timePrecision="now"
        onReady={handleRouteReady}
        onError={handleError}
        resetOnChange={false}
        optimizeWaypoints={true}
        region="ph" // Specify region for better results
        language="en"
        waypoints={[]}
        splitWaypoints={true}
        directionsServiceBaseUrl="https://maps.googleapis.com/maps/api/directions/json"
        locationEnabled={true}
        provideRouteAlternatives={false}
      />
      {showRouteInfo && routeInfo && (
        <RouteInfo routeInfo={routeInfo} style={routeInfoStyle} />
      )}
    </>
  );
};

export const RouteInfo = ({ routeInfo, style }) => {
  if (!routeInfo) return null;

  return (
    <View style={[styles.routeInfoContainer, style]}>
      <Text style={styles.routeInfoText}>
        {routeInfo.distance.toFixed(1)} km • {Math.ceil(routeInfo.duration)}{" "}
        mins
      </Text>
      <Text style={styles.fareText}>₱{routeInfo.fare}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  routeInfoContainer: {
    position: "absolute",
    top: 180,
    left: 20,
    right: 20,
    backgroundColor: colors.background,
    borderRadius: 8,
    padding: 12,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    elevation: 4,
    shadowColor: colors.text,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  routeInfoText: {
    fontSize: 16,
    fontFamily: fonts.medium,
    color: colors.text,
  },
  fareText: {
    fontSize: 18,
    fontFamily: fonts.semiBold,
    color: colors.primary,
  },
  errorContainer: {
    padding: 10,
    backgroundColor: colors.error + "20",
    borderRadius: 8,
    margin: 10,
  },
  errorText: {
    color: colors.error,
    textAlign: "center",
    fontFamily: fonts.medium,
  },
});

export default React.memo(MapViewDirectionsCustom);
