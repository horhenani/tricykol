import React, {
  useEffect,
  useRef,
  useState,
  useCallback,
  useMemo,
} from "react";
import {
  View,
  StyleSheet,
  StatusBar,
  KeyboardAvoidingView,
  Platform,
  BackHandler,
  ActivityIndicator,
} from "react-native";
import { SafeAreaProvider } from "react-native-safe-area-context";
import { Portal } from "react-native-paper";
import useLocationService from "@services/useLocationService";
import DashboardHeader from "@components/DashboardHeader";
import StyledMapView from "@components/map/StyledMapView";
import BookButton from "@components/bookings/BookButton";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import { LocationDisabledAlert } from "@components/location/LocationAlerts";
import { WelcomeLocationModal } from "../components/location/LocationAlerts";
import { useAuth } from "@context/AuthContext";
import CurrentLocationButton from "@components/map/CurrentLocationButton";
import firestore from "@react-native-firebase/firestore";
import * as Location from "expo-location";
import colors from "@constants/globalStyles";
import { BookingService } from "@services/bookingService";
import ActiveBookingCard from "@components/bookings/ActiveBookingCard";
import TripCompletionModal from "@components/bookings/TripCompletionModal";
import { useNetworkStatus } from "../hooks/useNetworkStatus";
import ConnectionStatusBar from "@components/ConnectionStatusBar";

import {
  TricycleMarker,
  LocationMarker,
} from "@components/map/markers/customMarkers";
import { preloadMarkerImages } from "@utils/markerImagePreload";
import DraggableLocationMarker from "@components/map/markers/DraggableLocationMarker";
import MapViewDirectionsCustom, {
  RouteInfo,
} from "@components/map/directions/MapViewDirectionsCustom";

const Dashboard = ({ navigation, route }) => {
  const [region, setRegion] = useState(null);
  const [isLocating, setIsLocating] = useState(false);
  const [markersLoaded, setMarkersLoaded] = useState(false);
  const [activeBooking, setActiveBooking] = useState(null);
  const [isBookingCardCollapsed, setIsBookingCardCollapsed] = useState(false);
  const [showCompletionModal, setShowCompletionModal] = useState(false);
  const [completedTripDetails, setCompletedTripDetails] = useState(null);
  const [isBookingModalVisible, setIsBookingModalVisible] = useState(false);

  const [pickupLocation, setPickupLocation] = useState(null);
  const [destinationLocation, setDestinationLocation] = useState(null);
  const [dropoffLocation, setDropoffLocation] = useState(null);

  const [locationState, setLocationState] = useState({
    pickup: null,
    dropoff: null,
    routeInfo: null,
  });
  const [dashboardState, setDashboardState] = useState({
    isInitializing: true,
    isMapReady: false,
  });

  const mapRef = useRef(null);
  const mountedRef = useRef(true);
  const stateRef = useRef({
    lastLocationUpdate: null,
    lastBookingUpdate: null,
    bookingSubscription: null,
    locationUpdateTimeout: null,
    isUpdatingLocation: false,
  });
  const bookingRef = useRef({
    activeBooking: null,
    lastUpdate: null,
    subscription: null,
    routeInfo: null,
  });

  // Custom hooks
  const { user } = useAuth();
  const { isConnectionStable } = useNetworkStatus();
  const {
    location,
    isLocationEnabled,
    hasLocationPermission,
    showLocationAlert,
    setShowLocationAlert,
    isFirstTimeUser,
    setIsFirstTimeUser,
    getCurrentLocation,
    requestLocationPermission,
    openLocationSettings,
    startLocationMonitoring,
    checkLocationPermission,
  } = useLocationService();

  const [isInitializing, setIsInitializing] = useState(true);
  const [isLoadingMap, setIsLoadingMap] = useState(true);

  const handleRouteInfoUpdate = useCallback((info) => {
    if (!mountedRef.current) return;
    bookingRef.current.routeInfo = info;
    if (JSON.stringify(info) !== JSON.stringify(bookingRef.current.routeInfo)) {
      setRouteInfo(info);
    }
  }, []);

  const initializeDashboard = useCallback(async () => {
    if (!mountedRef.current || !user?.uid) return;
    try {
      const [userDoc, activeBooking] = await Promise.all([
        firestore().collection("users").doc(user.uid).get(),
        BookingService.getActiveBooking(user.uid),
      ]);

      if (!mountedRef.current) return;

      const isNewUser =
        !userDoc.exists || (userDoc.exists && !userDoc.data()?.hasSeenWelcome);
      setIsFirstTimeUser(isNewUser);

      if (activeBooking) {
        handleActiveBooking(activeBooking);
      }

      if (!isNewUser && !isLocationEnabled) {
        setShowLocationAlert(true);
      }

      setDashboardState((prev) => ({
        ...prev,
        isInitializing: false,
      }));
    } catch (error) {
      console.error("Error initializing dashboard:", error);
      setDashboardState((prev) => ({
        ...prev,
        isInitializing: false,
      }));
    }
  }, [user?.uid, isLocationEnabled, handleActiveBooking]);

  const handleActiveBooking = useCallback((booking) => {
    if (!mountedRef.current) return;

    const hasSignificantChanges = () => {
      const current = bookingRef.current.activeBooking;
      if (!current) return true;

      // Compare only essential properties
      return (
        current.status !== booking.status ||
        current.pickup.latitude !== booking.pickup.latitude ||
        current.pickup.longitude !== booking.pickup.longitude ||
        current.dropoff.latitude !== booking.dropoff.latitude ||
        current.dropoff.longitude !== booking.dropoff.longitude
      );
    };

    // Only update if there are significant changes
    if (hasSignificantChanges()) {
      bookingRef.current.activeBooking = booking;
      setActiveBooking(booking);

      // Update map view if needed
      if (mapRef.current && booking?.route?.coordinates) {
        requestAnimationFrame(() => {
          mapRef.current.fitToCoordinates(booking.route.coordinates, {
            edgePadding: {
              top: 100,
              right: 50,
              bottom: 100,
              left: 50,
            },
            animated: true,
          });
        });
      }
    }
  }, []);

  useEffect(() => {
    if (!user?.uid || !isConnectionStable) return;

    const setupBookingSubscription = () => {
      // Clear existing subscription
      if (bookingRef.current.subscription) {
        bookingRef.current.subscription();
      }

      const unsubscribe = firestore()
        .collection("bookings")
        .where("userId", "==", user.uid)
        .where("status", "in", [
          "pending",
          "accepted",
          "arrived",
          "in_progress",
        ])
        .limit(1)
        .onSnapshot(
          (snapshot) => {
            if (!mountedRef.current) return;

            const now = Date.now();
            // Throttle updates
            if (
              bookingRef.current.lastUpdate &&
              now - bookingRef.current.lastUpdate < 3000
            ) {
              return;
            }

            const booking = snapshot.docs[0]?.data();
            if (booking) {
              handleActiveBooking({
                id: snapshot.docs[0].id,
                ...booking,
              });
            } else if (bookingRef.current.activeBooking) {
              // Clear booking if none exists
              handleClearBooking();
            }

            bookingRef.current.lastUpdate = now;
          },
          (error) => {
            console.error("Booking subscription error:", error);
          },
        );

      bookingRef.current.subscription = unsubscribe;
    };

    setupBookingSubscription();

    return () => {
      if (bookingRef.current.subscription) {
        bookingRef.current.subscription();
      }
    };
  }, [user?.uid, isConnectionStable]);

  useEffect(() => {
    if (!location || !mountedRef.current || stateRef.current.isUpdatingLocation)
      return;

    const now = Date.now();
    if (
      !stateRef.current.lastLocationUpdate ||
      now - stateRef.current.lastLocationUpdate > 3000
    ) {
      stateRef.current.isUpdatingLocation = true;

      if (stateRef.current.locationUpdateTimeout) {
        clearTimeout(stateRef.current.locationUpdateTimeout);
      }

      stateRef.current.locationUpdateTimeout = setTimeout(() => {
        if (!mountedRef.current) return;

        if (!locationState.pickup && location.coords) {
          setLocationState((prev) => ({
            ...prev,
            pickup: {
              latitude: location.coords.latitude,
              longitude: location.coords.longitude,
            },
          }));
        }

        stateRef.current.lastLocationUpdate = now;
        stateRef.current.isUpdatingLocation = false;
      }, 300);
    }
  }, [location]);

  useEffect(() => {
    initializeDashboard();
    return () => {
      mountedRef.current = false;
      if (stateRef.current.locationUpdateTimeout) {
        clearTimeout(stateRef.current.locationUpdateTimeout);
      }
      if (stateRef.current.bookingSubscription) {
        stateRef.current.bookingSubscription();
      }
    };
  }, [initializeDashboard]);

  const handleClearBooking = useCallback(async () => {
    if (!user?.uid || !activeBooking?.id) return;

    try {
      // Clear all route-related state first
      setLocationState((prev) => ({
        ...prev,
        pickup: null,
        dropoff: null,
        routeInfo: null,
      }));
      setActiveBooking(null);

      // Then clear from storage and Firestore
      await BookingService.clearActiveBooking(user.uid);

      // Reset map to current location if available
      if (location?.coords && mapRef.current) {
        mapRef.current.animateToRegion({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.005,
          longitudeDelta: 0.005,
        });
      }
    } catch (error) {
      console.error("Error clearing booking:", error);
      // Log more specific error information
      if (error instanceof Error) {
        console.error("Error details:", {
          message: error.message,
          stack: error.stack,
          name: error.name,
        });
      }
    }
  }, [user?.uid, activeBooking?.id, location]);

  // Preload marker images when component mounts
  useEffect(() => {
    const loadMarkers = async () => {
      try {
        await preloadMarkerImages();
        setMarkersLoaded(true);
      } catch (error) {
        console.error("Error preloading markers:", error);
        // Still set to true to not block the UI
        setMarkersLoaded(true);
      }
    };

    loadMarkers();
  }, []);

  // Set initial pickup location when user location is available
  useEffect(() => {
    if (location?.coords && !pickupLocation) {
      setPickupLocation({
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      });
    }
  }, [location]);

  // Handle booking flow
  const handleBookingLocationSelect = (type, selectedLocation) => {
    if (type === "pickup") {
      setPickupLocation(selectedLocation);
    } else {
      setDestinationLocation(selectedLocation);
    }
  };

  const handleWelcomeDismiss = async () => {
    try {
      if (user?.uid) {
        // Update Firestore
        await firestore().collection("users").doc(user.uid).update({
          hasSeenWelcome: true,
          updatedAt: firestore.FieldValue.serverTimestamp(),
        });
        // Update local state
        setIsFirstTimeUser(false);
      }
    } catch (error) {
      console.error("Error handling welcome dismiss:", error);
    }
  };

  // Watch for location changes and update map

  const handleRegionChange = (newRegion) => {
    setRegion(newRegion);
  };

  // Location permission request handler
  const handleLocationPermissionRequest = async () => {
    try {
      // Directly call the location permission request
      const { status } = await Location.requestForegroundPermissionsAsync();
      const granted = status === "granted";

      // If permission granted, start location services
      if (granted) {
        await checkLocationPermission();
        if (isLocationEnabled) {
          await startLocationMonitoring();
        }
      }

      return granted;
    } catch (error) {
      console.error("Error requesting location permission:", error);
      return false;
    }
  };

  // Location settings handler
  const handleOpenLocationSettings = async () => {
    try {
      await openLocationSettings();
      // Note: We don't need to check immediately as the useEffect interval will handle it
    } catch (error) {
      console.error("Error opening location settings:", error);
    }
  };

  useEffect(() => {
    const backHandler = BackHandler.addEventListener(
      "hardwareBackPress",
      () => {
        if (isBookingModalVisible) {
          setIsBookingModalVisible(false);
          return true;
        }
        return false;
      },
    );

    return () => backHandler.remove();
  }, [isBookingModalVisible]);

  const handleLocationButtonPress = async () => {
    try {
      setIsLocating(true);

      // Quick check for location services
      if (!isLocationEnabled) {
        setShowLocationAlert(true);
        setIsLocating(false);
        return;
      }

      // Quick check for permissions
      if (!hasLocationPermission) {
        const granted = await requestLocationPermission();
        if (!granted) {
          setIsLocating(false);
          return;
        }
      }

      // Use existing location first for immediate response
      if (location?.coords) {
        mapRef.current?.animateToRegion(
          {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            latitudeDelta: 0.005, // Closer zoom level
            longitudeDelta: 0.005,
          },
          300, // Quicker animation
        );

        // Then get fresh location in background
        getCurrentLocation()
          .then((freshLocation) => {
            if (freshLocation?.coords && mapRef.current) {
              mapRef.current.animateToRegion(
                {
                  latitude: freshLocation.coords.latitude,
                  longitude: freshLocation.coords.longitude,
                  latitudeDelta: 0.005,
                  longitudeDelta: 0.005,
                },
                200,
              );
            }
          })
          .catch((error) => {
            console.error("Error getting fresh location:", error);
          });
      } else {
        // If no existing location, wait for fresh location
        const currentLocation = await getCurrentLocation();
        if (currentLocation?.coords && mapRef.current) {
          mapRef.current.animateToRegion(
            {
              latitude: currentLocation.coords.latitude,
              longitude: currentLocation.coords.longitude,
              latitudeDelta: 0.005,
              longitudeDelta: 0.005,
            },
            300,
          );
        }
      }
    } catch (error) {
      console.error("Error handling location button press:", error);
    } finally {
      setIsLocating(false);
    }
  };

  const handleLocationSelect = (type, location) => {
    if (type === "pickup") {
      setPickupLocation(location);
      // If needed, animate map to show pickup location
      if (mapRef.current) {
        mapRef.current.animateToRegion(
          {
            latitude: location.latitude,
            longitude: location.longitude,
            latitudeDelta: 0.005,
            longitudeDelta: 0.005,
          },
          1000,
        );
      }
    } else {
      setDropoffLocation(location);
      // If needed, animate map to show destination
      if (mapRef.current) {
        mapRef.current.animateToRegion(
          {
            latitude: location.latitude,
            longitude: location.longitude,
            latitudeDelta: 0.005,
            longitudeDelta: 0.005,
          },
          1000,
        );
      }
    }
  };

  // useEffect(() => {
  //   if (route.params?.booking) {
  //     const { booking } = route.params;
  //
  //     // Set booking states
  //     setActiveBooking(booking);
  //     setPickupLocation({
  //       latitude: booking.pickup.latitude,
  //       longitude: booking.pickup.longitude,
  //       title: booking.pickup.address,
  //       description: booking.pickup.description,
  //     });
  //     setDropoffLocation({
  //       latitude: booking.dropoff.latitude,
  //       longitude: booking.dropoff.longitude,
  //       title: booking.dropoff.address,
  //       description: booking.dropoff.description,
  //     });
  //
  //     // Set route info
  //     if (booking.route) {
  //       setRouteInfo(booking.route);
  //
  //       // Fit map to show route
  //       if (mapRef.current && booking.route.coordinates) {
  //         setTimeout(() => {
  //           mapRef.current.fitToCoordinates(booking.route.coordinates, {
  //             edgePadding: {
  //               top: 100,
  //               right: 50,
  //               bottom: 100,
  //               left: 50,
  //             },
  //             animated: true,
  //           });
  //         }, 1000);
  //       }
  //     }
  //
  //     // Clear navigation params
  //     navigation.setParams({ booking: undefined });
  //   }
  // }, [route.params?.booking]);

  const handleBookPress = () => {
    if (!isLocationEnabled) {
      setShowLocationAlert(true);
      return;
    }

    navigation.navigate("Booking", {
      pickupLocation: pickupLocation && {
        latitude: pickupLocation.latitude,
        longitude: pickupLocation.longitude,
        title: pickupLocation.title || "",
        description: pickupLocation.description,
      },
      dropoffLocation: dropoffLocation && {
        latitude: dropoffLocation.latitude,
        longitude: dropoffLocation.longitude,
        title: dropoffLocation.title,
        description: dropoffLocation.description,
      },
      routeInfo,
    });
  };

  const handleCompletionModalClose = () => {
    setShowCompletionModal(false);
    setCompletedTripDetails(null);
    handleClearBooking();
  };

  if (dashboardState.isInitializing) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={colors.primary} />
      </View>
    );
  }

  const MapContent = useMemo(() => {
    if (!activeBooking) return null;

    return (
      <>
        <MapViewDirectionsCustom
          origin={{
            latitude: activeBooking.pickup.latitude,
            longitude: activeBooking.pickup.longitude,
          }}
          destination={{
            latitude: activeBooking.dropoff.latitude,
            longitude: activeBooking.dropoff.longitude,
          }}
          mapRef={mapRef}
          onRouteInfoUpdate={handleRouteInfoUpdate}
          strokeColor={colors.primary}
          strokeWidth={4}
        />
        <LocationMarker
          coordinate={{
            latitude: activeBooking.pickup.latitude,
            longitude: activeBooking.pickup.longitude,
          }}
          type="pickup"
          identifier="pickup"
          title={activeBooking.pickup.address}
          description={activeBooking.pickup.description}
        />
        <LocationMarker
          coordinate={{
            latitude: activeBooking.dropoff.latitude,
            longitude: activeBooking.dropoff.longitude,
          }}
          type="destination"
          identifier="dropoff"
          title={activeBooking.dropoff.address}
          description={activeBooking.dropoff.description}
        />
      </>
    );
  }, [activeBooking, handleRouteInfoUpdate]);

  return (
    <SafeAreaProvider>
      <ConnectionStatusBar />
      <StatusBar translucent backgroundColor="transparent" />
      <View style={styles.container}>
        <StyledMapView
          ref={mapRef}
          onMapReady={() =>
            setDashboardState((prev) => ({ ...prev, isMapReady: true }))
          }
          initialCamera={{
            center: {
              latitude: 15.6626,
              longitude: 120.5814,
            },
            pitch: 0,
            heading: 0,
            altitude: 1000,
            zoom: 16,
          }}
        >
          {dashboardState.isMapReady && MapContent}
        </StyledMapView>

        <DashboardHeader />

        <TripCompletionModal
          visible={showCompletionModal}
          onClose={handleCompletionModalClose}
          tripDetails={completedTripDetails}
        />

        {activeBooking && (
          <>
            <ActiveBookingCard
              booking={activeBooking}
              onStateChange={(collapsed) =>
                setIsBookingCardCollapsed(collapsed)
              }
              onDismiss={handleClearBooking}
              routeInfo={bookingRef.current.routeInfo}
            />
            {/* Only show directions when there's an active booking */}
            {pickupLocation && dropoffLocation && (
              <MapViewDirectionsCustom
                origin={pickupLocation}
                destination={dropoffLocation}
                mapRef={mapRef}
                onRouteInfoUpdate={handleRouteInfoUpdate}
                // isDriverView={isDriver}
                strokeColor={colors.primary}
                strokeWidth={4}
              />
            )}
          </>
        )}

        <CurrentLocationButton
          onPress={handleLocationButtonPress}
          loading={isLocating}
          style={styles.currentLocationButton}
        />

        <BookButton
          onPress={handleBookPress}
          disabled={!!activeBooking}
          pickup={pickupLocation}
          dropoff={dropoffLocation}
          routeInfo={routeInfo}
        />

        {!isInitializing && (
          <Portal>
            <WelcomeLocationModal
              visible={isFirstTimeUser}
              onDismiss={handleWelcomeDismiss}
              userName={user?.firstName}
              onRequestPermission={handleLocationPermissionRequest}
              onOpenSettings={handleOpenLocationSettings}
              isLocationEnabled={isLocationEnabled}
              hasLocationPermission={hasLocationPermission}
            />

            <LocationDisabledAlert
              visible={showLocationAlert && !isFirstTimeUser}
              onDismiss={() => setShowLocationAlert(false)}
            />
          </Portal>
        )}
      </View>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },

  currentLocationButton: {
    position: "absolute",
    bottom: 120,
    right: 15,
    zIndex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: colors.background,
  },
});

export default React.memo(Dashboard);
